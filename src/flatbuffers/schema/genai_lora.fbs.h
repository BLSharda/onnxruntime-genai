// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GENAILORA_GENERATORS_LORA_PARAMETERS_H_
#define FLATBUFFERS_GENERATED_GENAILORA_GENERATORS_LORA_PARAMETERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Generators {
namespace lora_parameters {

struct Tensor;
struct TensorBuilder;

struct Parameters;
struct ParametersBuilder;

enum class TensorDataType : int32_t {
  UNDEFINED = 0,
  FLOAT = 1,
  UINT8 = 2,
  INT8 = 3,
  UINT16 = 4,
  INT16 = 5,
  INT32 = 6,
  INT64 = 7,
  STRING = 8,
  BOOL = 9,
  FLOAT16 = 10,
  DOUBLE = 11,
  UINT32 = 12,
  UINT64 = 13,
  COMPLEX64 = 14,
  COMPLEX128 = 15,
  BFLOAT16 = 16,
  FLOAT8E4M3FN = 17,
  FLOAT8E4M3FNUZ = 18,
  FLOAT8E5M2 = 19,
  FLOAT8E5M2FNUZ = 20,
  MIN = UNDEFINED,
  MAX = FLOAT8E5M2FNUZ
};

inline const TensorDataType (&EnumValuesTensorDataType())[21] {
  static const TensorDataType values[] = {
    TensorDataType::UNDEFINED,
    TensorDataType::FLOAT,
    TensorDataType::UINT8,
    TensorDataType::INT8,
    TensorDataType::UINT16,
    TensorDataType::INT16,
    TensorDataType::INT32,
    TensorDataType::INT64,
    TensorDataType::STRING,
    TensorDataType::BOOL,
    TensorDataType::FLOAT16,
    TensorDataType::DOUBLE,
    TensorDataType::UINT32,
    TensorDataType::UINT64,
    TensorDataType::COMPLEX64,
    TensorDataType::COMPLEX128,
    TensorDataType::BFLOAT16,
    TensorDataType::FLOAT8E4M3FN,
    TensorDataType::FLOAT8E4M3FNUZ,
    TensorDataType::FLOAT8E5M2,
    TensorDataType::FLOAT8E5M2FNUZ
  };
  return values;
}

inline const char * const *EnumNamesTensorDataType() {
  static const char * const names[22] = {
    "UNDEFINED",
    "FLOAT",
    "UINT8",
    "INT8",
    "UINT16",
    "INT16",
    "INT32",
    "INT64",
    "STRING",
    "BOOL",
    "FLOAT16",
    "DOUBLE",
    "UINT32",
    "UINT64",
    "COMPLEX64",
    "COMPLEX128",
    "BFLOAT16",
    "FLOAT8E4M3FN",
    "FLOAT8E4M3FNUZ",
    "FLOAT8E5M2",
    "FLOAT8E5M2FNUZ",
    nullptr
  };
  return names;
}

inline const char *EnumNameTensorDataType(TensorDataType e) {
  if (::flatbuffers::IsOutRange(e, TensorDataType::UNDEFINED, TensorDataType::FLOAT8E5M2FNUZ)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTensorDataType()[index];
}

struct Tensor FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TensorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DIMS = 6,
    VT_DATA_TYPE = 8,
    VT_RAW_DATA = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<int64_t> *dims() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_DIMS);
  }
  Generators::lora_parameters::TensorDataType data_type() const {
    return static_cast<Generators::lora_parameters::TensorDataType>(GetField<int32_t>(VT_DATA_TYPE, 0));
  }
  const ::flatbuffers::Vector<uint8_t> *raw_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_RAW_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DIMS) &&
           verifier.VerifyVector(dims()) &&
           VerifyField<int32_t>(verifier, VT_DATA_TYPE, 4) &&
           VerifyOffset(verifier, VT_RAW_DATA) &&
           verifier.VerifyVector(raw_data()) &&
           verifier.EndTable();
  }
};

struct TensorBuilder {
  typedef Tensor Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Tensor::VT_NAME, name);
  }
  void add_dims(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> dims) {
    fbb_.AddOffset(Tensor::VT_DIMS, dims);
  }
  void add_data_type(Generators::lora_parameters::TensorDataType data_type) {
    fbb_.AddElement<int32_t>(Tensor::VT_DATA_TYPE, static_cast<int32_t>(data_type), 0);
  }
  void add_raw_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> raw_data) {
    fbb_.AddOffset(Tensor::VT_RAW_DATA, raw_data);
  }
  explicit TensorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Tensor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Tensor>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Tensor> CreateTensor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> dims = 0,
    Generators::lora_parameters::TensorDataType data_type = Generators::lora_parameters::TensorDataType::UNDEFINED,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> raw_data = 0) {
  TensorBuilder builder_(_fbb);
  builder_.add_raw_data(raw_data);
  builder_.add_data_type(data_type);
  builder_.add_dims(dims);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Tensor> CreateTensorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<int64_t> *dims = nullptr,
    Generators::lora_parameters::TensorDataType data_type = Generators::lora_parameters::TensorDataType::UNDEFINED,
    const std::vector<uint8_t> *raw_data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto dims__ = dims ? _fbb.CreateVector<int64_t>(*dims) : 0;
  auto raw_data__ = raw_data ? _fbb.CreateVector<uint8_t>(*raw_data) : 0;
  return Generators::lora_parameters::CreateTensor(
      _fbb,
      name__,
      dims__,
      data_type,
      raw_data__);
}

struct Parameters FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ParametersBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_PARAMETERS = 6
  };
  int32_t version() const {
    return GetField<int32_t>(VT_VERSION, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Generators::lora_parameters::Tensor>> *parameters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Generators::lora_parameters::Tensor>> *>(VT_PARAMETERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VERSION, 4) &&
           VerifyOffset(verifier, VT_PARAMETERS) &&
           verifier.VerifyVector(parameters()) &&
           verifier.VerifyVectorOfTables(parameters()) &&
           verifier.EndTable();
  }
};

struct ParametersBuilder {
  typedef Parameters Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_version(int32_t version) {
    fbb_.AddElement<int32_t>(Parameters::VT_VERSION, version, 0);
  }
  void add_parameters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Generators::lora_parameters::Tensor>>> parameters) {
    fbb_.AddOffset(Parameters::VT_PARAMETERS, parameters);
  }
  explicit ParametersBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Parameters> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Parameters>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Parameters> CreateParameters(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t version = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Generators::lora_parameters::Tensor>>> parameters = 0) {
  ParametersBuilder builder_(_fbb);
  builder_.add_parameters(parameters);
  builder_.add_version(version);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Parameters> CreateParametersDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t version = 0,
    const std::vector<::flatbuffers::Offset<Generators::lora_parameters::Tensor>> *parameters = nullptr) {
  auto parameters__ = parameters ? _fbb.CreateVector<::flatbuffers::Offset<Generators::lora_parameters::Tensor>>(*parameters) : 0;
  return Generators::lora_parameters::CreateParameters(
      _fbb,
      version,
      parameters__);
}

inline const Generators::lora_parameters::Parameters *GetParameters(const void *buf) {
  return ::flatbuffers::GetRoot<Generators::lora_parameters::Parameters>(buf);
}

inline const Generators::lora_parameters::Parameters *GetSizePrefixedParameters(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Generators::lora_parameters::Parameters>(buf);
}

inline const char *ParametersIdentifier() {
  return "GAIL";
}

inline bool ParametersBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ParametersIdentifier());
}

inline bool SizePrefixedParametersBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ParametersIdentifier(), true);
}

inline bool VerifyParametersBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Generators::lora_parameters::Parameters>(ParametersIdentifier());
}

inline bool VerifySizePrefixedParametersBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Generators::lora_parameters::Parameters>(ParametersIdentifier());
}

inline void FinishParametersBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Generators::lora_parameters::Parameters> root) {
  fbb.Finish(root, ParametersIdentifier());
}

inline void FinishSizePrefixedParametersBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Generators::lora_parameters::Parameters> root) {
  fbb.FinishSizePrefixed(root, ParametersIdentifier());
}

}  // namespace lora_parameters
}  // namespace Generators

#endif  // FLATBUFFERS_GENERATED_GENAILORA_GENERATORS_LORA_PARAMETERS_H_
